// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	reflect "reflect"

	entity "github.com/adough/warehouse_api/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// GetProductInWarehouse mocks base method.
func (m *MockParser) GetProductInWarehouse(filename string) ([]entity.ProductInWarehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInWarehouse", filename)
	ret0, _ := ret[0].([]entity.ProductInWarehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInWarehouse indicates an expected call of GetProductInWarehouse.
func (mr *MockParserMockRecorder) GetProductInWarehouse(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInWarehouse", reflect.TypeOf((*MockParser)(nil).GetProductInWarehouse), filename)
}

// GetProducts mocks base method.
func (m *MockParser) GetProducts(filename string) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", filename)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockParserMockRecorder) GetProducts(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockParser)(nil).GetProducts), filename)
}

// GetWarehouses mocks base method.
func (m *MockParser) GetWarehouses(filename string) ([]entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouses", filename)
	ret0, _ := ret[0].([]entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouses indicates an expected call of GetWarehouses.
func (mr *MockParserMockRecorder) GetWarehouses(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouses", reflect.TypeOf((*MockParser)(nil).GetWarehouses), filename)
}
