// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/adough/warehouse_api/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockRepository) AddProduct(ctx context.Context, data entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepositoryMockRecorder) AddProduct(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepository)(nil).AddProduct), ctx, data)
}

// AddProductInWarehouse mocks base method.
func (m *MockRepository) AddProductInWarehouse(ctx context.Context, data entity.ProductInWarehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductInWarehouse", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductInWarehouse indicates an expected call of AddProductInWarehouse.
func (mr *MockRepositoryMockRecorder) AddProductInWarehouse(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductInWarehouse", reflect.TypeOf((*MockRepository)(nil).AddProductInWarehouse), ctx, data)
}

// AddWarehouse mocks base method.
func (m *MockRepository) AddWarehouse(ctx context.Context, data entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWarehouse", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWarehouse indicates an expected call of AddWarehouse.
func (mr *MockRepositoryMockRecorder) AddWarehouse(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWarehouse", reflect.TypeOf((*MockRepository)(nil).AddWarehouse), ctx, data)
}

// GetAllProduct mocks base method.
func (m *MockRepository) GetAllProduct(ctx context.Context) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", ctx)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockRepositoryMockRecorder) GetAllProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockRepository)(nil).GetAllProduct), ctx)
}

// GetAllProductInWarehouse mocks base method.
func (m *MockRepository) GetAllProductInWarehouse(ctx context.Context, id int64) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductInWarehouse", ctx, id)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductInWarehouse indicates an expected call of GetAllProductInWarehouse.
func (mr *MockRepositoryMockRecorder) GetAllProductInWarehouse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductInWarehouse", reflect.TypeOf((*MockRepository)(nil).GetAllProductInWarehouse), ctx, id)
}

// GetAllWarehouse mocks base method.
func (m *MockRepository) GetAllWarehouse(ctx context.Context) ([]entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWarehouse", ctx)
	ret0, _ := ret[0].([]entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWarehouse indicates an expected call of GetAllWarehouse.
func (mr *MockRepositoryMockRecorder) GetAllWarehouse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWarehouse", reflect.TypeOf((*MockRepository)(nil).GetAllWarehouse), ctx)
}

// RealeaseOfReserve mocks base method.
func (m *MockRepository) RealeaseOfReserve(ctx context.Context, data entity.ProductInWarehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealeaseOfReserve", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// RealeaseOfReserve indicates an expected call of RealeaseOfReserve.
func (mr *MockRepositoryMockRecorder) RealeaseOfReserve(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealeaseOfReserve", reflect.TypeOf((*MockRepository)(nil).RealeaseOfReserve), ctx, data)
}

// ReservationProduct mocks base method.
func (m *MockRepository) ReservationProduct(ctx context.Context, data entity.ProductInWarehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationProduct", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReservationProduct indicates an expected call of ReservationProduct.
func (mr *MockRepositoryMockRecorder) ReservationProduct(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationProduct", reflect.TypeOf((*MockRepository)(nil).ReservationProduct), ctx, data)
}
